<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>Menu</class>
 <widget class="QDialog" name="Menu">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>400</width>
    <height>300</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Dialog</string>
  </property>
  <property name="styleSheet">
   <string notr="true">
.QWidget {
   background-color: beige;
}

/* Nice Windows-XP-style password character. */
QLineEdit[echoMode=&quot;2&quot;] {
    lineedit-password-character: 9679;
}

/* We provide a min-width and min-height for push buttons
   so that they look elegant regardless of the width of the text. */
QPushButton {
    background-color: palegoldenrod;
    border-width: 2px;
    border-color: darkkhaki;
    border-style: solid;
    border-radius: 5;
    padding: 3px;
    min-width: 9ex;
    min-height: 2.5ex;
}

QPushButton:hover {
   background-color: khaki;
}

/* Increase the padding, so the text is shifted when the button is
   pressed. */
QPushButton:pressed {
    padding-left: 5px;
    padding-top: 5px;
    background-color: #d0d67c;
}

QLabel, QAbstractButton {

    color:rgb(153, 51, 51);
  
}

/* Mark mandatory fields with a brownish color. */
.mandatory {
    color: brown;
}

/* Bold text on status bar looks awful. */
QStatusBar QLabel {
   font: normal;
}

QStatusBar::item {
    border-width: 1;
    border-color: darkkhaki;
    border-style: solid;
    border-radius: 2;
}

QComboBox, QLineEdit, QSpinBox, QTextEdit, QListView {
    background-color: cornsilk;
    selection-color: #0a214c; 
    selection-background-color: #C19A6B;
}

QListView {
    show-decoration-selected: 1;
}

QListView::item:hover {
    background-color: wheat;
}

/* We reserve 1 pixel space in padding. When we get the focus,
   we kill the padding and enlarge the border. This makes the items
   glow. */
QLineEdit, QFrame {
    border-width: 2px;
    padding: 1px;
    border-style: solid;
    border-color: darkkhaki;
    border-radius: 5px;
}

/* As mentioned above, eliminate the padding and increase the border. */
QLineEdit:focus, QFrame:focus {
    border-width: 3px;
    padding: 0px;
}

/* A QLabel is a QFrame ... */
QLabel {
    border: none;
    padding: 0;
    background: none;
}

/* A QToolTip is a QLabel ... */
QToolTip {
    border: 2px solid darkkhaki;
    padding: 5px;
    border-radius: 3px;
    opacity: 200;
}

/* Nice to have the background color change when hovered. */
QRadioButton:hover, QCheckBox:hover {
   background-color: rgb(255, 153, 153)
;
}
QRadioButton:checked{
   background-color: rgb(255, 153, 153)
;
}
/* Force the dialog's buttons to follow the Windows guidelines. */
QDialogButtonBox {
   background-color: rgb(255, 204, 204);

}
QDialog{
   background-color:beige;

}
/**** QMenuBar (enabled) ****/
QMenuBar
{
   background-color: beige;
  border: 1px solid transparent;
  border-bottom-color: rgb(80,80,80);
}

QMenuBar::item
{
   background-color: beige;
  color: rgb(220,220,220);
  padding: 8px;
}

QMenuBar::item:selected
{
   background-color: beige;
  color: white;
}

/**** QMenuBar (disabled) ****/
QMenuBar:disabled
{
   background-color: beige;
  border-bottom-color: rgb(60,60,60);
}

QMenuBar::item:disabled
{
  color: rgb(40,40,40);
}

/*********************************************************************************************************/

/**** QMenu (enabled) ****/
QMenu
{
   background-color: beige;
  color: rgb(220,220,220);
}

QMenu::item:selected
{
   background-color: beige;
  color: white;
}</string>
  </property>
  <widget class="QRadioButton" name="radioButton">
   <property name="geometry">
    <rect>
     <x>40</x>
     <y>90</y>
     <width>171</width>
     <height>20</height>
    </rect>
   </property>
   <property name="text">
    <string>Gerer les agents </string>
   </property>
  </widget>
  <widget class="QRadioButton" name="radioButton_2">
   <property name="geometry">
    <rect>
     <x>30</x>
     <y>130</y>
     <width>111</width>
     <height>20</height>
    </rect>
   </property>
   <property name="text">
    <string>Gerer les bus</string>
   </property>
  </widget>
  <widget class="QRadioButton" name="radioButton_3">
   <property name="geometry">
    <rect>
     <x>20</x>
     <y>180</y>
     <width>151</width>
     <height>20</height>
    </rect>
   </property>
   <property name="text">
    <string>Gerer le parking</string>
   </property>
  </widget>
  <widget class="QRadioButton" name="gererAbonne">
   <property name="geometry">
    <rect>
     <x>210</x>
     <y>90</y>
     <width>161</width>
     <height>20</height>
    </rect>
   </property>
   <property name="text">
    <string>Gerer les abonn√©s</string>
   </property>
  </widget>
  <widget class="QRadioButton" name="radioButton_5">
   <property name="geometry">
    <rect>
     <x>190</x>
     <y>130</y>
     <width>161</width>
     <height>20</height>
    </rect>
   </property>
   <property name="text">
    <string>Gerer les evenements </string>
   </property>
  </widget>
  <widget class="QRadioButton" name="radioButton_6">
   <property name="geometry">
    <rect>
     <x>170</x>
     <y>180</y>
     <width>151</width>
     <height>20</height>
    </rect>
   </property>
   <property name="text">
    <string>Gerer les stations</string>
   </property>
  </widget>
  <widget class="QPushButton" name="retour">
   <property name="geometry">
    <rect>
     <x>230</x>
     <y>250</y>
     <width>93</width>
     <height>28</height>
    </rect>
   </property>
   <property name="text">
    <string>Retour</string>
   </property>
  </widget>
 </widget>
 <resources/>
 <connections/>
</ui>
